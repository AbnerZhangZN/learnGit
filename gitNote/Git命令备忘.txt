
	* git init 

                    把当前目录变成Git可管理的仓库

	* git add 文件名 

                    加入暂存区

	* git commit -m "注释"

                    提交暂存区的修改 

	* git status

                    查看状态

	* git diff HEAD -- 文件名

                    可以查看工作区和版本库里面最新版本的区别

	* git checkout -- file

                    丢弃工作区的修改

	* git reset HEAD file

                    把暂存区的修改撤销掉（unstage），重新放回工作区

	* 部分小结
	* 
		* 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		* 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		* 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

	* git rm test.txt

                    版本库中删除该文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

	* git push origin master

                    把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库

	* git clone git@github.com:michaelliao/gitskills.git

                    Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

忽略提交的文件
不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
忽略文件的原则是：

	1. 忽略操作系统自动生成的文件，比如缩略图等；
	2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	3. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。


	* 忽略某些文件时，需要编写.gitignore；

	* 
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理


配置别名

st表示status
$ git config --global alias.st status



